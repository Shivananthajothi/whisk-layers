import Order from "../models/Order.js";
import Cart from "../models/Cart.js";

// Create Order - UPDATED
export const createOrder = async (req, res) => {
Â  try {
Â  Â  const userId = req.user.id;
    // ðŸ’¡ NEW FIELDS ADDED TO DESTRUCTURE
Â  Â  const { address, paymentMode, paymentWay, finalAmount } = req.body; 

Â  Â  const cart = await Cart.findOne({ user: userId }).populate("items.product");
Â  Â  if (!cart || cart.items.length === 0) return res.status(400).json({ message: "Cart empty" });

Â  Â  const items = cart.items.map(i => ({
Â  Â  Â  product: i.product._id,
Â  Â  Â  name: i.product.name,
Â  Â  Â  price: i.product.price,
Â  Â  Â  qty: i.quantity,
Â  Â  Â  customization: i.customization || ""
Â  Â  }));

Â  Â  const total = items.reduce((s, it) => s + (it.price * it.qty), 0);

Â  Â  const order = new Order({
Â  Â  Â  user: userId,
Â  Â  Â  orderItems: items, // Using orderItems to match the model schema name
Â  Â  Â  totalAmount: total, // Existing field
Â  Â  Â  address,
Â  Â  Â  status: "Placed",
Â  Â  Â  paymentStatus: "Paid",
      // ðŸ’¾ NEW FIELDS SAVED HERE
      paymentMode: paymentMode || 'cash', 
      paymentWay: paymentWay || 'Exact Change',
      finalAmount: finalAmount || total
Â  Â  });

Â  Â  await order.save();
Â  Â  await Cart.findOneAndDelete({ user: userId });
Â  Â  res.status(201).json({ order });
Â  } catch (err) {
Â  Â  res.status(500).json({ message: "Failed to create order" });
Â  }
};

// Get Orders - UNCHANGED
export const getOrders = async (req, res) => {
Â  try {
Â  Â  const userId = req.user.id;
Â  Â  const orders = await Order.find({ user: userId }).sort({ createdAt: -1 });
Â  Â  res.json(orders);
Â  } catch (err) {
Â  Â  res.status(500).json({ message: "Failed to fetch orders" });
Â  }
};

// Get Single Order - UNCHANGED (It finds by ID, which implicitly returns the full object)
export const getOrder = async (req, res) => {
Â  try {
Â  Â  const order = await Order.findById(req.params.id);
Â  Â  if (!order) return res.status(404).json({ message: "Order not found" });
Â  Â  if (order.user.toString() !== req.user.id) return res.status(403).json({ message: "Not authorized" });
Â  Â  res.json(order);
Â  } catch (err) {
Â  Â  res.status(500).json({ message: "Failed to fetch order" });
Â  }
};